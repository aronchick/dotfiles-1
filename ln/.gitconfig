[user]
	name = Justin Garrison
	email = justinleegarrison@gmail.com
[alias]
  ds = diff --staged      # git ds - diff your staged changes == review before committing.
  s = status --short --branch    # smarter status - include tag and branch info
  fup = log --since=1.day --oneline --author='Justin Garrison'  # I know what you did yesterday - great for follow-ups
  ls = log --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=short  # pretty one-line log with tags, branches and authors
  lsv = log --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=short --    numstat # a verbose ls, shows changed files too
  
  prune = fetch --prune
  # Because I constantly forget how to do this
  # https://git-scm.com/docs/git-fetch#git-fetch--p
  
  # some resets without explanation
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  
  # basic shortcuts
  cp = cherry-pick
  cl = clone
  ci = commit
  co = checkout
  br = branch 
  diff = diff --word-diff
  dc = diff --cached
  d = diff
  g = grep -in 
  a = add
  cam = commit -a -m
  cm = commit -m
  
  # stash shortcuts
  sl = stash list
  sa = stash apply
  ss = stash save
  
  stash-all = stash save --include-untracked
  # We wanna grab those pesky un-added files!
  # https://git-scm.com/docs/git-stash

  # log related - thanks to @mwd410
  l = log 
  lh = log --graph
  la = !git lh --date-order --all 2> /dev/null
  lb = log --graph --simplify-by-decoration
  lba = !git lb --all 
  h = !git --no-pager log --graph -n 15
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  # No need for a GUI - a nice, colorful, graphical representation
  # https://git-scm.com/docs/git-log
  # via https://medium.com/@payload.dd/thanks-for-the-git-st-i-will-use-this-4da5839a21a4

  # stolen from aauren
  # Finds the upstream tracking branch, if it contains a remote, fetch the remote first, then attempt to merge, failing over into a rebase operation if that fails
  up = "!f() { \
    upstream_br="$(git rev-parse --abbrev-ref "$(git rev-parse --abbrev-ref HEAD)@{upstream}")"; \
    if [[ ${upstream_br} == *"/"* ]]; then \
      echo "fetching ${upstream_br%%/*}..."; \
      git fetch ${upstream_br%%/*} --prune; \
    fi; \
    echo "merging/rebasing on top of ${upstream_br}..."; \
    git merge --ff-only "${upstream_br}" || git rebase --preserve-merges "${upstream_br}"; \
  }; f"
  # Like the above, except that this one is DANGEROUS because it will rebase accepting all of their branch's changes in the event of a conflict
  fup = "!f() { \
    upstream_br="$(git rev-parse --abbrev-ref "$(git rev-parse --abbrev-ref HEAD)@{upstream}")"; \
    if [[ ${upstream_br} == *"/"* ]]; then \
      echo "fetching ${upstream_br%%/*}..."; \
      git fetch ${upstream_br%%/*} --prune; \
    fi; \
    echo "merging/rebasing on top of ${upstream_br}..."; \
    git merge --ff-only "${upstream_br}" || git rebase -s recursive -X ours "${upstream_br}"; \
  }; f"
  # Updates this branch and it's tracking branch (assuming that the tracking branch isn't a remote) using the "up" alias above
  tup = "!f() { \
    upstream_br="$(git rev-parse --abbrev-ref "$(git rev-parse --abbrev-ref HEAD)@{upstream}")"; \
    if [[ ! ${upstream_br} == *"/"* ]]; then \
      git co "${upstream_br}"; \
      git up; \
      git co -; \
      git up; \
    else \
      echo "Tracking branch is a remote, not running"; \
    fi; \
  }; f"
	undo = "!f() { \\\n    git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; \\\n}; f"
	commend = commit --amend --no-edit
	stsh = stash --keep-index
	staash = stash --include-untracked
	staaash = stash --all
	grog = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"
[color]
	ui = auto
[rerere]
	enabled = true
  # https://git-scm.com/blog/2010/03/08/rerere.html
[push]
	default = simple
  # "push the current branch back to the branch whose changes are usually integrated into the current branch"
  # "refuse to push if the upstream branchâ€™s name is different from the local one"
  # https://git-scm.com/docs/git-config#git-config-pushdefault

  followTags = true
  # Because I get sick of telling git to do it manually
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags
[core]
	excludesfile = ~/.gitignore
  editor = vim
[pull]
	rebase = true
[merge]
  ff = only
  # I pretty much never mean to do a real merge, since I use a rebase workflow.
  # Note: this global option applies to all merges, including those done during a git pull
  # https://git-scm.com/docs/git-config#git-config-mergeff

  conflictstyle = diff3
  # Standard diff is two sets of final changes. This introduces the original text before each side's changes.
  # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle

[status]
  showUntrackedFiles = all
  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles

[transfer]
  fsckobjects = true
  # To combat repository corruption!
  # Note: this global option applies during receive and transmit
  # https://git-scm.com/docs/git-config#git-config-transferfsckObjects
  # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
  
# A nice little github-like colorful, split diff right in the console.
# via http://owen.cymru/github-style-diff-in-terminal-with-icdiff/
[diff]
  tool = icdiff
[difftool]
  prompt = false
[difftool "icdiff"]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE
